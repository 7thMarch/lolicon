name: Get Data

on:
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * *"

# 添加权限设置
permissions:
  contents: write    # 允许推送到仓库
  actions: write     # 允许管理 Actions

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PYTHONUNBUFFERED: 1  # Ensures Python output is sent straight to terminal
      TZ: UTC  # Ensure timezone is UTC for consistent logging

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0   # 确保获取完整的 git 历史

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create logs directory
      run: mkdir -p logs

    - name: Run Script
      run: |
        # Add timestamp to log filename
        LOG_FILE="logs/pixiv_fetch_$(date +%Y%m%d_%H%M%S).log"
        
        # Run the script and tee output to both console and file
        python loliconapi.py 2>&1 | tee "$LOG_FILE"
        
        # Check if the script executed successfully
        if [ ${PIPESTATUS[0]} -eq 0 ]; then
          echo "Script completed successfully"
        else
          echo "Script failed with exit code ${PIPESTATUS[0]}"
          exit 1
        fi

    - name: Make index
      if: success()  # Only run if previous step succeeded
      run: |
        # 初始化 index.json 文件
        printf "[" > index.json

        # 检查 data 目录是否存在且不为空
        if [ -d "./data" ] && [ "$(ls -A ./data)" ]; then
          # 获取所有文件并按字典序排序
          files=$(ls ./data | sort)
          
          # 初始化一个标志来追踪是否是第一个文件
          first=true
          
          # 遍历所有文件
          for file in $files; do
            if [ "$first" = true ]; then
              # 第一个文件不需要前导逗号
              printf "\"%s\"" "$file" >> index.json
              first=false
            else
              # 其他文件需要前导逗号
              printf ",\"%s\"" "$file" >> index.json
            fi
          done
        fi

        # 关闭 JSON 数组
        printf "]" >> index.json

    - name: Upload logs as artifact
      if: always()  # Run even if the script fails
      uses: actions/upload-artifact@v4 # 更新到 v4 版本
      with:
        name: execution-logs-${{ github.run_id }}
        path: logs/
        retention-days: 7

    - name: Commit changes
      if: success()
      run: |
        git config --global user.email "AutoupdateRobot@email.com"
        git config --global user.name "AutoupdateRobot"
        
        # Stage the changes
        git add data/ index.json
        
        # Create commit message with timestamp and run statistics
        COMMIT_MSG="update json $(date +%Y-%m-%d_%H:%M:%S_UTC)"
        
        # Try to commit, but don't fail if there are no changes
        git commit -m "$COMMIT_MSG" || echo "No changes to commit"

    - name: Push changes
      if: success()
      run: |
        git config --global user.email "AutoupdateRobot@email.com"
        git config --global user.name "AutoupdateRobot"
        git add data/ index.json
        git commit -m "update json $(date +%Y-%m-%d_%H:%M:%S_UTC)" || echo "No changes to commit"
        git push origin main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Cleanup old logs
      if: always()
      run: |
        # Keep only the last 7 days of logs
        find logs/ -type f -mtime +7 -delete
